"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8592],{1025:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var n=s(5893),t=s(1151);const r={},o="Guest Optimization Guide",a={id:"zkvm/developer-guide/optimization",title:"Guest Optimization Guide",description:"RISC Zero\u2019s zkVM is designed and built to act like a physical CPU.",source:"@site/api/zkvm/developer-guide/optimization.md",sourceDirName:"zkvm/developer-guide",slug:"/zkvm/developer-guide/optimization",permalink:"/website-preview/risc0/risc0/pr/1101/api/next/zkvm/developer-guide/optimization",draft:!1,unlisted:!1,editUrl:"https://github.com/risc0/risc0/edit/main/website/api/zkvm/developer-guide/optimization.md",tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"Receipts 101",permalink:"/website-preview/risc0/risc0/pr/1101/api/next/zkvm/developer-guide/receipts"},next:{title:"Cryptography Acceleration",permalink:"/website-preview/risc0/risc0/pr/1101/api/next/zkvm/developer-guide/acceleration"}},d={},c=[{value:"Background",id:"background",level:2},{value:"What is the zkVM, really?",id:"what-is-the-zkvm-really",level:3},{value:"What is a \u201ccycle\u201d?",id:"what-is-a-cycle",level:3},{value:"General techniques and advice",id:"general-techniques-and-advice",level:2},{value:"Don\u2019t assume, measure.",id:"dont-assume-measure",level:3},{value:"Measuring by printing to console",id:"measuring-by-printing-to-console",level:3},{value:"Profiling",id:"profiling",level:3},{value:"Key Differences",id:"key-differences",level:2},{value:"Most RISC-V operations take exactly one cycle",id:"most-risc-v-operations-take-exactly-one-cycle",level:3},{value:"Memory access costs one cycle, except when it doesn\u2019t",id:"memory-access-costs-one-cycle-except-when-it-doesnt",level:3},{value:"Paging",id:"paging",level:4},{value:"The zkVM does not have native floating point operations",id:"the-zkvm-does-not-have-native-floating-point-operations",level:3},{value:"Unaligned data access is significantly more expensive",id:"unaligned-data-access-is-significantly-more-expensive",level:3},{value:"When reading data as raw bytes, use <code>env::read_slice</code>",id:"when-reading-data-as-raw-bytes-use-envread_slice",level:3},{value:"When you only need part of the input data, try Merklizing it",id:"when-you-only-need-part-of-the-input-data-try-merklizing-it",level:3},{value:"Cryptography in the guest can utilize accelerator circuits",id:"cryptography-in-the-guest-can-utilize-accelerator-circuits",level:3},{value:"Memory access is synchronous",id:"memory-access-is-synchronous",level:3},{value:"All execution is single-threaded",id:"all-execution-is-single-threaded",level:3},{value:"The zkVM has no pipelining or other instruction-level parallelism.",id:"the-zkvm-has-no-pipelining-or-other-instruction-level-parallelism",level:3},{value:"Prover Acceleration",id:"prover-acceleration",level:2},{value:"TL;DR and quick wins",id:"tldr-and-quick-wins",level:2},{value:"Appendix",id:"appendix",level:2},{value:"RV32IM Operations with Cycle Counts",id:"rv32im-operations-with-cycle-counts",level:3},{value:"RISC Zero ECALL Operations",id:"risc-zero-ecall-operations",level:3}];function l(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",strong:"strong",sup:"sup",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"guest-optimization-guide",children:"Guest Optimization Guide"}),"\n",(0,n.jsxs)(i.p,{children:["RISC Zero\u2019s zkVM is designed and built to act like a physical CPU.\nWe did this so you could use general purpose languages (e.g. Rust) and general purpose tools (e.g. Cargo, LLVM). ",(0,n.jsx)(i.strong,{children:"Generally, you can apply general purpose optimization techniques too!"})]}),"\n",(0,n.jsxs)(i.p,{children:["In this guide, we\u2019ll cover optimization of ",(0,n.jsx)(i.a,{href:"./guest-code-101",children:"zkVM guest programs"}),".\nWe\u2019ll discuss when you can apply common techniques from other contexts, and when you need a new approach."]}),"\n",(0,n.jsx)(i.h2,{id:"background",children:"Background"}),"\n",(0,n.jsx)(i.h3,{id:"what-is-the-zkvm-really",children:"What is the zkVM, really?"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"The zkVM is essentially a CPU."})}),"\n",(0,n.jsxs)(i.p,{children:["In particular, it is an implementation of the ",(0,n.jsx)(i.a,{href:"/reference-docs/about-risc-v",children:"RISC-V architecture"})," (specifically riscv32im), similar to how your laptop\u2019s CPU may be an implementation of an ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/X86",children:"x86"})," or ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/ARM_architecture_family",children:"ARM"})," architecture.\nThis biggest difference is that the zkVM is implemented with ",(0,n.jsx)(i.a,{href:"/reference-docs/about-arithmetic-circuits",children:"arithmetic circuits"}),", in software, instead of circuitry made from silicon and copper."]}),"\n",(0,n.jsx)(i.h3,{id:"what-is-a-cycle",children:"What is a \u201ccycle\u201d?"}),"\n",(0,n.jsx)(i.p,{children:"Both in the zkVM and on physical CPUs, the cost of an operation is measured in \u201cclock cycles\u201d."}),"\n",(0,n.jsxs)(i.p,{children:["Intuitively, a \"clock cycle\" is the smallest unit of time in a CPU's operation, representing one tick of the CPU's internal clock and the time it takes to execute a basic CPU operation (e.g. adding two integers).\nWe\u2019ll refer to this as a \u201ccycle\u201d. ",(0,n.jsx)(i.sup,{children:(0,n.jsx)(i.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Proving times for the zkVM are directly related to the number of cycles in an execution."})}),"\n",(0,n.jsx)(i.h2,{id:"general-techniques-and-advice",children:"General techniques and advice"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Start by applying general techniques and best practices for optimizing your code."})}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"https://nnethercote.github.io/perf-book/",children:"The Rust Performance Book"})," is great resource.\nIt\u2019s not very long, it covers a range of topics important to performance, and gives applicable advice for optimization.\nIf you are new to optimization, or new to Rust, we recommend you read this guide."]}),"\n",(0,n.jsx)(i.h3,{id:"dont-assume-measure",children:"Don\u2019t assume, measure."}),"\n",(0,n.jsx)(i.p,{children:"Performance is complex, in the zkVM as on a physical CPU.\nDon\u2019t assume you know what the bottlenecks are. Measure and experiment."}),"\n",(0,n.jsxs)(i.p,{children:["If you make a function 100x faster (or \u221ex faster) but it only takes 1% of your execution time, you\u2019ll see less than 1% improvement in performance.\nThis is generally referred to as ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Amdahl%27s_law",children:"Amdahl\u2019s Law"}),", and practically it means you shouldn't waste your time optimizing something that's not the taking a significant portion of execution time."]}),"\n",(0,n.jsx)(i.h3,{id:"measuring-by-printing-to-console",children:"Measuring by printing to console"}),"\n",(0,n.jsxs)(i.p,{children:["Starting simple, measure by adding an ",(0,n.jsx)(i.code,{children:"eprintln!"})," line to your guest code to measure how long an operation takes, and how many times it is called."]}),"\n",(0,n.jsxs)(i.p,{children:["Using ",(0,n.jsx)(i.a,{href:"https://docs.rs/risc0-zkvm/0.19/risc0_zkvm/guest/env/fn.get_cycle_count.html",children:(0,n.jsx)(i.code,{children:"env::get_cycle_count()"})})," will tell you the current number of execution cycles that have occurred in your program."]}),"\n",(0,n.jsx)(i.p,{children:"As an example:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-rust",metastring:'no_run title="methods/guest/src/main.rs"',children:'fn my_operation_to_measure() {\n  let start = env::get_cycle_count();\n\n  // potentially expensive or frequently called code\n  // ...\n\n  let end = env::get_cycle_count();\n  eprintln!("my_operation_to_measure: {}", end - start);\n}\n'})}),"\n",(0,n.jsxs)(i.p,{children:["When you run your guest, you\u2019ll see a printout of the cycle count each time that function is called.\nYou can then analyze this data easily with a tool like ",(0,n.jsx)(i.a,{href:"https://github.com/nnethercote/counts/",children:(0,n.jsx)(i.code,{children:"counts"})}),"."]}),"\n",(0,n.jsx)(i.h3,{id:"profiling",children:"Profiling"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Profiling is one of the most important tools for understanding and optimizing your code."})}),"\n",(0,n.jsxs)(i.p,{children:["Profiling tools, like ",(0,n.jsx)(i.a,{href:"https://github.com/google/pprof",children:"pprof"})," and ",(0,n.jsx)(i.a,{href:"https://perf.wiki.kernel.org/index.php/Main_Page",children:"perf"}),", allow collecting performance information over the entire execution of your program, and help create visualizations for the performance of your program.\nRISC Zero has experimental support for generating pprof files for cycle counts."]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"https://nikhilism.com/post/2018/sampling-profiler-internals-introduction/",children:"Sampling CPU profilers"}),', as implemented by pprof and perf, provide a view of where your program is spending its time.\nIt does so by recording the current call stack at a sampling interval.\nRISC Zero provides a "sampling" ',(0,n.jsx)(i.sup,{children:(0,n.jsx)(i.a,{href:"#user-content-fn-2",id:"user-content-fnref-2","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})})," CPU profiler for guest execution."]}),"\n",(0,n.jsxs)(i.p,{children:["One very useful visualization of this data is as a ",(0,n.jsx)(i.a,{href:"https://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html",children:"flamegraph"}),", such as the one below for the ",(0,n.jsx)(i.a,{href:"https://github.com/risc0/risc0/tree/v0.19.0/examples/ecdsa",children:"ECDSA verification example"}),"."]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"ECDSA verification flamegraph",src:s(9027).Z+"",width:"1812",height:"456"})}),"\n",(0,n.jsxs)(i.p,{children:["Generate this profile and flamegraph by ",(0,n.jsx)(i.a,{href:"https://go.dev/doc/install",children:"installing Go"})," and running the following commands:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-bash",children:"# In your clone of github.com/risc0/risc0\ncd examples/ecdsa\nRISC0_PPROF_OUT=ecdsa_verify.pb RISC0_DEV_MODE=true cargo run -F profiler\ngo tool pprof -http 127.0.0.1:8000 ecdsa_verify.pb\n"})}),"\n",(0,n.jsxs)(i.p,{children:["Open ",(0,n.jsx)(i.a,{href:"http://127.0.0.1:8000/ui/flamegraph",children:"http://127.0.0.1:8000/ui/flamegraph"})," in your web browser to see the flamegraph."]}),"\n",(0,n.jsxs)(i.p,{children:["Although it\u2019s bundled with Go, the ",(0,n.jsx)(i.code,{children:"pprof"})," tool can be used with profiles from programs not written in Golang.\n",(0,n.jsx)(i.code,{children:"pprof"})," has extensive functionality, and the documentation linked below contains information about the different views provided, comparing profiles, and much more."]}),"\n",(0,n.jsxs)(i.p,{children:["Documentation for ",(0,n.jsx)(i.code,{children:"pprof"}),": ",(0,n.jsx)(i.a,{href:"https://github.com/google/pprof/blob/main/doc/README.md",children:"github.com/google/pprof"})]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsxs)(i.strong,{children:["More information about profiling can be found in the ",(0,n.jsx)(i.a,{href:"./profiling",children:"Guest Profiling Guide"})]})}),"\n",(0,n.jsx)(i.h2,{id:"key-differences",children:"Key Differences"}),"\n",(0,n.jsx)(i.p,{children:"Using general purpose advice and tools for optimization will work 80% of the time.\nBut there are some key differences between how physical CPUs and the zkVM operate that can be important to understand when trying to get the best possible guest performance."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"This section explains some of the most important differences between a physical CPU and the zkVM, as they relate to guest performance."})}),"\n",(0,n.jsxs)(i.h3,{id:"most-risc-v-operations-take-exactly-one-cycle",children:["Most ",(0,n.jsx)(i.a,{href:"https://mark.theis.site/riscv/",children:"RISC-V operations"})," take exactly one cycle"]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Not all operations cost the same amount."}),"\nAn ",(0,n.jsx)(i.code,{children:"add"})," instruction takes fewer cycles than a ",(0,n.jsx)(i.code,{children:"div"}),". This is true for both the zkVM and physical CPUs."]}),"\n",(0,n.jsxs)(i.p,{children:["However, the relative difference between instructions is much smaller in the zkVM.\nIn the zkVM, a ",(0,n.jsx)(i.code,{children:"div"})," takes twice as long as an ",(0,n.jsx)(i.code,{children:"add"}),".\nOn a physical CPU, a ",(0,n.jsx)(i.code,{children:"div"})," takes ",(0,n.jsx)(i.a,{href:"http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/",children:"15-40 times"})," as long compared to an ",(0,n.jsx)(i.code,{children:"add"}),".\nPractically, this means if you have a choice between implementing ",(0,n.jsx)(i.a,{href:"https://briansmith.org/ecc-inversion-addition-chains-01",children:"an algorithm"})," with 10 ",(0,n.jsx)(i.code,{children:"add"})," ops, or a single ",(0,n.jsx)(i.code,{children:"div"}),". On a physical CPU, choose the ",(0,n.jsx)(i.code,{children:"add"})," ops. In the zkVM choose the ",(0,n.jsx)(i.code,{children:"div"}),"."]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Addition, comparison, jump, shift left, load and store all take one cycle."}),"\n",(0,n.jsx)(i.li,{children:"Bitwise operations (AND, OR, XOR), division, remainder, and shift right take two cycles."}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"Note that this means that shift left is no faster than multiplying by a power of two, and shift right is no faster than division.\nA number of other small optimizations like this, routinely applied by developers and compilers, have no effect in the zkVM."}),"\n",(0,n.jsxs)(i.p,{children:["See the ",(0,n.jsx)(i.a,{href:"#rv32im-operations-with-cycle-counts",children:"table in the appendix"})," for more information about cycle counts per operation."]}),"\n",(0,n.jsx)(i.h3,{id:"memory-access-costs-one-cycle-except-when-it-doesnt",children:"Memory access costs one cycle, except when it doesn\u2019t"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"https://mark.theis.site/riscv/",children:"RISC-V operations"})," require data to be loaded from memory to ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Processor_register",children:"registers"})," before it can acted on (e.g. used as input to an ",(0,n.jsx)(i.code,{children:"add"}),").\nIt must also be written back to memory to store the result. Memory loads and stores (i.e. reads and writes) usually take one cycle."]}),"\n",(0,n.jsxs)(i.p,{children:["Memory access, both load and store takes exactly one cycle, expect in the case of page-in and page-out operations (",(0,n.jsx)(i.a,{href:"#paging",children:"discussed below"}),")."]}),"\n",(0,n.jsxs)(i.p,{children:["Note that relative to a physical CPU, this is extremely fast (in terms of cycles).\nOn a physical CPU even a value in ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Cache_hierarchy",children:"L1 cache"})," takes ",(0,n.jsx)(i.a,{href:"http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/",children:"3-4 cycles"})," to access.\nL3 cache takes ",(0,n.jsx)(i.a,{href:"http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/",children:"30-70 cycles"})," and main memory ",(0,n.jsx)(i.a,{href:"http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/",children:"100-150"}),".\nOne of the most common bottlenecks in applications is the round-trip time it takes to access a data in memory."]}),"\n",(0,n.jsx)(i.h4,{id:"paging",children:"Paging"}),"\n",(0,n.jsxs)(i.p,{children:["Every execution of the zkVM starts from an initial memory state.\nThis memory state (a.k.a. image) is referenced by an ",(0,n.jsx)(i.a,{href:"https://dev.risczero.com/terminology#image-id",children:"image ID"}),", which contains a ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Merkle_tree",children:"Merkle root"})," committing to all data in memory.\nFor efficiency, data in memory is split into 1 kB pages."]}),"\n",(0,n.jsxs)(i.p,{children:["Pages in the zkVM are analogous a ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Page_(computer_memory)",children:"page in an operating system"}),", and in particular this term was chosen in reference to ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Memory_paging",children:"memory paging"}),", or swapping, systems.\nExecution of a program is split into ",(0,n.jsx)(i.a,{href:"https://www.risczero.com/news/continuations",children:"continuation segments"}),".\nBetween segments, the zkVM essentially ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Hibernation_(computing)",children:"hibernates"}),", saving all working memory to the host; as a CPU would use a hard drive."]}),"\n",(0,n.jsxs)(i.p,{children:["The first time a page is accessed in a segment, it needs to be ",(0,n.jsx)(i.strong,{children:"paged-in"}),", loading it from the host.\nConfirming the page is correct, the guest verifies a Merkle inclusion proof for the page against the image ID.\nThese hashing operations required take a number of cycles."]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"A page-in operation takes between 1094 and 5130 cycles; 1130 cycles on average."}),(0,n.jsx)(i.sup,{children:(0,n.jsx)(i.a,{href:"#user-content-fn-3",id:"user-content-fnref-3","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"3"})})]}),"\n",(0,n.jsx)(i.p,{children:"The very first page-in takes longer, 5130 cycles, because it needs to traverse up the page table (i.e. Merkle tree) all the way to the root, which is equal to the image ID.\nOnce a path is verified, it doesn\u2019t need to be hashed again, so most page-in operations only need to hash the leaf (i.e. data) page.\nIf a program were to iterate over memory in sequence, it would cost on average 1130 cycles per page, or 1.35 cycles per byte."}),"\n",(0,n.jsxs)(i.p,{children:["In order to support continuation after the segment ends (i.e. the zkVM \u201chibernates\u201d), it needs to ",(0,n.jsx)(i.strong,{children:"page-out"})," pages that were modified.\nPaging-out takes the same number of operations as paging-in, so for the first time any given page is written to in a segment, there is an page-out cost of 1094 to 5130 cycles."]}),"\n",(0,n.jsx)(i.p,{children:"If, after profiling your application, you learn page-in and page-out operations are a significant overhead, you can optimize your application by reducing it\u2019s memory usage and locality.\nThis will be somewhat similar to optimizing for data locality and L1/2 cache usage.\nUsing fewer pages, using the same page repeatedly instead of a random access pattern, and condensing the range of addresses accessed can all help reduce paging overhead.\nIt\u2019s best to experiment."}),"\n",(0,n.jsx)(i.h3,{id:"the-zkvm-does-not-have-native-floating-point-operations",children:"The zkVM does not have native floating point operations"}),"\n",(0,n.jsx)(i.p,{children:"The RISC Zero zkVM does not implement the RISC-V floating point instructions.\nAs a result, all floating point operations are emulated in software.\nIn contrast to integer operations that take 1-2 cycles, floating point operations can take 60-140 cycles for basic operations such as add, subtract, multiply, and divide."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"When possible, use integers instead of floating point numbers."})}),"\n",(0,n.jsx)(i.h3,{id:"unaligned-data-access-is-significantly-more-expensive",children:"Unaligned data access is significantly more expensive"}),"\n",(0,n.jsx)(i.p,{children:"CPUs define a standard size of data for operation; and this is referred to as a word.\nIn RISC-V 32-bit ISA, the size of a word is 32 bits (4 bytes).\nMemory is always read and stored as words."}),"\n",(0,n.jsxs)(i.p,{children:["When the read or store address is not a multiple of 4 bytes, the operation is much more expensive.\nIn a simple benchmark, reading an unaligned ",(0,n.jsx)(i.code,{children:"u32"})," value costs 12 cycles, versus 1 cycle for an aligned read."]}),"\n",(0,n.jsx)(i.p,{children:"All allocations will be aligned by default, and the compiler wants to help you, so this should usually not be an issue."}),"\n",(0,n.jsxs)(i.p,{children:["If you are defining structs that containing small primitive typed fields (e.g. ",(0,n.jsx)(i.code,{children:"bool"}),", ",(0,n.jsx)(i.code,{children:"u8"}),", ",(0,n.jsx)(i.code,{children:"i16"}),") and access this data very frequently, you might consider paying extra care to the ",(0,n.jsx)(i.a,{href:"https://doc.rust-lang.org/reference/type-layout.html#the-alignment-modifiers",children:"alignment of those fields"}),".\nAdditionally, if you are slicing into byte arrays, try to do so at word-aligned indices."]}),"\n",(0,n.jsxs)(i.h3,{id:"when-reading-data-as-raw-bytes-use-envread_slice",children:["When reading data as raw bytes, use ",(0,n.jsx)(i.code,{children:"env::read_slice"})]}),"\n",(0,n.jsxs)(i.p,{children:["When reading input into the guest, ",(0,n.jsx)(i.a,{href:"https://docs.rs/risc0-zkvm/latest/risc0_zkvm/guest/env/fn.read.html",children:(0,n.jsx)(i.code,{children:"env::read"})})," is the main API to use.\nIt automatically deserializes the input bytes into structs, like in this ",(0,n.jsx)(i.a,{href:"https://github.com/risc0/risc0/blob/v0.19.0/examples/password-checker/methods/guest/src/main.rs#L24",children:"snippet from the password checker example"}),"."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-rust",metastring:"no_run",children:"let request: PasswordRequest = env::read();\n"})}),"\n",(0,n.jsxs)(i.p,{children:["In the host code, ",(0,n.jsx)(i.code,{children:"ExecutorEnvBuilder::write"})," function is used to serialize and write to input struct so that the guest can read it."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-rust",children:"let request = PasswordRequest { /* .. */ };\nlet env = ExecutorEnv::builder()\n        .write(&request).unwrap()\n        .build()\n        .unwrap();\n"})}),"\n",(0,n.jsx)(i.p,{children:"In most cases, these APIs are what you should use to send data to the guest."}),"\n",(0,n.jsxs)(i.p,{children:["However, when you need to read and work with data as raw bytes (or words), it is more efficient to use ",(0,n.jsx)(i.a,{href:"https://docs.rs/risc0-zkvm/0.19/risc0_zkvm/guest/env/fn.read_slice.html",children:(0,n.jsx)(i.code,{children:"env::read_slice"})})," or ",(0,n.jsx)(i.code,{children:"env::stdin().read_to_end"}),".\nBoth methods do no (de)serialization and so do not need to copy or reinterpret the input data.\nExamples of when this may be useful are if you are reading in image data as bytes, or reading data that is binary encoded from the source like with ",(0,n.jsx)(i.a,{href:"https://cbor.io/",children:"CBOR"}),"."]}),"\n",(0,n.jsxs)(i.p,{children:["Here is a ",(0,n.jsx)(i.a,{href:"https://github.com/risc0/risc0/blob/v0.19.0/bonsai/examples/governance/methods/guest/src/bin/finalize_votes.rs#L88-L90",children:"snippet from the Bonsai Governance example"})," showing how to read bytes."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-rust",metastring:"no_run",children:"let mut input_bytes = Vec::<u8>::new();\nenv::stdin().read_to_end(&mut input_bytes).unwrap();\n"})}),"\n",(0,n.jsxs)(i.p,{children:["On the host side, ",(0,n.jsx)(i.code,{children:"ExecutorEnvBuilder::write_slice"})," is used to pass in the bytes."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-rust",children:'let input_bytes: Vec<u8> = b"INPUT DATA".to_vec();\nlet env = ExecutorEnv::builder()\n        .write_slice(&input_bytes)\n        .build()\n        .unwrap();\n'})}),"\n",(0,n.jsx)(i.h3,{id:"when-you-only-need-part-of-the-input-data-try-merklizing-it",children:"When you only need part of the input data, try Merklizing it"}),"\n",(0,n.jsxs)(i.p,{children:["Some programs only need part of the whole available data.\n",(0,n.jsx)(i.a,{href:"https://github.com/risc0/risc0/tree/v0.19.0/examples/waldo",children:"Where\u2019s Waldo"})," is an example of this.\nThe full input is an image, but only the part with Waldo in it is needed.\nLoading and hashing the whole image would be quite expensive, so instead the initial input for the guest is just the Merkle root and each chunk is loaded dynamically.\nThe guest verifies that the chunk is indeed part of the image by verifying the Merkle inclusion proof."]}),"\n",(0,n.jsxs)(i.p,{children:["If you are writing a guest with a large input, and only part of it is needed for the computation, consider splitting it into some notion of a chunks and building it as a Merkle tree.\nYou can use the ",(0,n.jsx)(i.a,{href:"https://github.com/risc0/risc0/blob/main/examples/waldo/core/src/merkle.rs",children:"code for Where\u2019s Waldo"})," as a starting point."]}),"\n",(0,n.jsx)(i.h3,{id:"cryptography-in-the-guest-can-utilize-accelerator-circuits",children:"Cryptography in the guest can utilize accelerator circuits"}),"\n",(0,n.jsxs)(i.p,{children:["RISC Zero\u2019s riscv32im implementation includes a number of special purpose operations, including two \u201caccelerators\u201d for cryptographic functions: SHA-256 and ",(0,n.jsx)(i.a,{href:"https://github.com/risc0/risc0/pull/466",children:"256-bit modular multiplication"}),".\nBy implementing these operations directly in the \u201chardware\u201d of the zkVM, programs that use these accelerators execute faster and can be proven with significantly less resources ",(0,n.jsx)(i.sup,{children:(0,n.jsx)(i.a,{href:"#user-content-fn-4",id:"user-content-fnref-4","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"4"})}),"."]}),"\n",(0,n.jsxs)(i.p,{children:["For more information about cryptography acceleration, ",(0,n.jsx)(i.a,{href:"./acceleration",children:"cryptography acceleration"}),"."]}),"\n",(0,n.jsx)(i.p,{children:"Using the accelerator, a SHA-256 compress operation typically takes 68 cycles per 64-byte block and 6 cycles to initialize.\nA 256-bit modular multiply takes 10 cycles.\nThis includes basic memory operation cycles, but does not include page-in or page-out operations that are triggered."}),"\n",(0,n.jsx)(i.h3,{id:"memory-access-is-synchronous",children:"Memory access is synchronous"}),"\n",(0,n.jsxs)(i.p,{children:["On a physical CPU, memory access is asynchronous to register operations; meaning arithmetic or logic operations on registers can run while the CPU is waiting for the result from memory.\nBecause the memory fetch latency is quite large (100-150x the time to ",(0,n.jsx)(i.code,{children:"add"})," two registers), this gives rise to techniques such as prefetching and speculative execution, implemented both at the processor and application levels."]}),"\n",(0,n.jsxs)(i.p,{children:["In the zkVM, all memory operations are synchronous, regardless of if the data is currently paged-in.\n",(0,n.jsx)(i.strong,{children:"Memory prefetching does not help (but can hurt) zkVM guest performance."})]}),"\n",(0,n.jsx)(i.h3,{id:"all-execution-is-single-threaded",children:"All execution is single-threaded"}),"\n",(0,n.jsxs)(i.p,{children:["The zkVM has one core and one thread of execution.\nAs a result, there is no need or use for multi-threading.\n",(0,n.jsxs)(i.strong,{children:["Using ",(0,n.jsx)(i.code,{children:"async"})," routines, locking, or atomic operations in the guest can only slow the program down."]})]}),"\n",(0,n.jsx)(i.h3,{id:"the-zkvm-has-no-pipelining-or-other-instruction-level-parallelism",children:"The zkVM has no pipelining or other instruction-level parallelism."}),"\n",(0,n.jsxs)(i.p,{children:["Modern processors have execution pipelines and ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Superscalar_processor",children:"superscalar architectures"})," designed to ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Instruction-level_parallelism",children:"execute instructions in parallel"}),".\nInstruction throughput is much higher when the pipeline is kept full and independent execution units are utilized.\nCPUs implement out-of-order and speculative execution, among other techniques to achieve this."]}),"\n",(0,n.jsx)(i.p,{children:"By comparison, RISC Zero\u2019s riscv32im implementation is very simple.\nInstructions will be read from the guest program and executed in the order chosen by the compiler."}),"\n",(0,n.jsxs)(i.p,{children:["Developers and compilers often use techniques such as pre-fetching, avoiding branches, or reordering instructions to maximize instruction-level parallelism.\n",(0,n.jsx)(i.strong,{children:"These techniques have essentially no effect in the zkVM."})]}),"\n",(0,n.jsx)(i.h2,{id:"prover-acceleration",children:"Prover Acceleration"}),"\n",(0,n.jsxs)(i.p,{children:["You are probably interested in guest optimization in order to have faster proving times, to reduce compute costs, or both.\nRISC Zero can leverage hardware accelerators, the ones made of real silicon this time, to accomplish both of these objectives. ",(0,n.jsx)(i.sup,{children:(0,n.jsx)(i.a,{href:"#user-content-fn-5",id:"user-content-fnref-5","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"5"})})]}),"\n",(0,n.jsxs)(i.p,{children:["With an NVIDIA graphics card, proving can be accelerated through the ",(0,n.jsx)(i.a,{href:"https://developer.nvidia.com/cuda-toolkit",children:"CUDA"})," implementation.\nWhen running a zkVM application, a compatible version of the CUDA runtime needs to be installed.\nWhen building the zkVM from source, a compatible version of the CUDA toolkit needs to be installed on the build machine, and the ",(0,n.jsx)(i.code,{children:"cuda"})," feature enabled."]}),"\n",(0,n.jsx)(i.h2,{id:"tldr-and-quick-wins",children:"TL;DR and quick wins"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"./profiling",children:"Profile your applications"})," to find where cycles are being spent."]}),"\n",(0,n.jsxs)(i.li,{children:["Try different ",(0,n.jsx)(i.a,{href:"https://doc.rust-lang.org/cargo/reference/profiles.html",children:"compiler settings"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["Setting ",(0,n.jsx)(i.code,{children:'lto = "thin"'})," is sometimes faster than ",(0,n.jsx)(i.code,{children:'lto = "fat"'})," or ",(0,n.jsx)(i.code,{children:"lto = true"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:["Sometimes ",(0,n.jsx)(i.code,{children:"opt-level = 2"})," is faster than ",(0,n.jsx)(i.code,{children:"3"}),". Try ",(0,n.jsx)(i.code,{children:"s"})," and ",(0,n.jsx)(i.code,{children:"z"})," too."]}),"\n",(0,n.jsxs)(i.li,{children:["Try setting ",(0,n.jsx)(i.code,{children:"codegen-units = 1"}),"."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["When you need a map, use ",(0,n.jsx)(i.code,{children:"BTreeMap"})," instead of ",(0,n.jsx)(i.code,{children:"HashMap"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:["When you need to hash data, use the ",(0,n.jsx)(i.a,{href:"https://dev.risczero.com/zkvm/developer-guide/acceleration",children:"accelerated implementation of SHA-256"}),"."]}),"\n",(0,n.jsx)(i.li,{children:"Look for places where you are copying or (de)serializing data when not necessary."}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{id:"appendix",children:"Appendix"}),"\n",(0,n.jsx)(i.h3,{id:"rv32im-operations-with-cycle-counts",children:"RV32IM Operations with Cycle Counts"}),"\n",(0,n.jsxs)(i.p,{children:["Table from ",(0,n.jsx)(i.a,{href:"https://mark.theis.site/riscv/",children:"https://mark.theis.site/riscv/"}),", with RISC Zero cycle counts added."]}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Assembly"}),(0,n.jsx)(i.th,{children:"Name"}),(0,n.jsx)(i.th,{children:"Pseudocode"}),(0,n.jsx)(i.th,{children:"RISC Zero Cycles"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"LUI rd,imm"}),(0,n.jsx)(i.td,{children:"Load Upper Immediate"}),(0,n.jsx)(i.td,{children:"rd \u2190 imm"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"AUIPC rd,offset"}),(0,n.jsx)(i.td,{children:"Add Upper Immediate to PC"}),(0,n.jsx)(i.td,{children:"rd \u2190 pc + offset"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"JAL rd,offset"}),(0,n.jsx)(i.td,{children:"Jump and Link"}),(0,n.jsx)(i.td,{children:"rd \u2190 pc + length(inst)pc \u2190 pc + offset"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"JALR rd,rs1,offset"}),(0,n.jsx)(i.td,{children:"Jump and Link Register"}),(0,n.jsx)(i.td,{children:"rd \u2190 pc + length(inst)pc \u2190 (rs1 + offset) \u2227 -2"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"BEQ rs1,rs2,offset"}),(0,n.jsx)(i.td,{children:"Branch Equal"}),(0,n.jsx)(i.td,{children:"if rs1 = rs2 then pc \u2190 pc + offset"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"BNE rs1,rs2,offset"}),(0,n.jsx)(i.td,{children:"Branch Not Equal"}),(0,n.jsx)(i.td,{children:"if rs1 \u2260 rs2 then pc \u2190 pc + offset"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"BLT rs1,rs2,offset"}),(0,n.jsx)(i.td,{children:"Branch Less Than"}),(0,n.jsx)(i.td,{children:"if rs1 < rs2 then pc \u2190 pc + offset"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"BGE rs1,rs2,offset"}),(0,n.jsx)(i.td,{children:"Branch Greater than Equal"}),(0,n.jsx)(i.td,{children:"if rs1 \u2265 rs2 then pc \u2190 pc + offset"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"BLTU rs1,rs2,offset"}),(0,n.jsx)(i.td,{children:"Branch Less Than Unsigned"}),(0,n.jsx)(i.td,{children:"if rs1 < rs2 then pc \u2190 pc + offset"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"BGEU rs1,rs2,offset"}),(0,n.jsx)(i.td,{children:"Branch Greater than Equal Unsigned"}),(0,n.jsx)(i.td,{children:"if rs1 \u2265 rs2 then pc \u2190 pc + offset"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"LB rd,offset(rs1)"}),(0,n.jsx)(i.td,{children:"Load Byte"}),(0,n.jsx)(i.td,{children:"rd \u2190 s8[rs1 + offset]"}),(0,n.jsxs)(i.td,{children:["1 if ",(0,n.jsx)(i.a,{href:"#paging",children:"paged-in"})," 1094 to 5130 otherwise"]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"LH rd,offset(rs1)"}),(0,n.jsx)(i.td,{children:"Load Half"}),(0,n.jsx)(i.td,{children:"rd \u2190 s16[rs1 + offset]"}),(0,n.jsxs)(i.td,{children:["1 if ",(0,n.jsx)(i.a,{href:"#paging",children:"paged-in"})," 1094 to 5130 otherwise"]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"LW rd,offset(rs1)"}),(0,n.jsx)(i.td,{children:"Load Word"}),(0,n.jsx)(i.td,{children:"rd \u2190 s32[rs1 + offset]"}),(0,n.jsxs)(i.td,{children:["1 if ",(0,n.jsx)(i.a,{href:"#paging",children:"paged-in"})," 1094 to 5130 otherwise"]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"LBU rd,offset(rs1)"}),(0,n.jsx)(i.td,{children:"Load Byte Unsigned"}),(0,n.jsx)(i.td,{children:"rd \u2190 u8[rs1 + offset]"}),(0,n.jsxs)(i.td,{children:["1 if ",(0,n.jsx)(i.a,{href:"#paging",children:"paged-in"})," 1094 to 5130 otherwise"]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"LHU rd,offset(rs1)"}),(0,n.jsx)(i.td,{children:"Load Half Unsigned"}),(0,n.jsx)(i.td,{children:"rd \u2190 u16[rs1 + offset]"}),(0,n.jsxs)(i.td,{children:["1 if ",(0,n.jsx)(i.a,{href:"#paging",children:"paged-in"})," 1094 to 5130 otherwise"]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SB rs2,offset(rs1)"}),(0,n.jsx)(i.td,{children:"Store Byte"}),(0,n.jsx)(i.td,{children:"u8[rs1 + offset] \u2190 rs2"}),(0,n.jsxs)(i.td,{children:["1 if ",(0,n.jsx)(i.a,{href:"#paging",children:"paged-in"})," 1094 to 5130 otherwise"]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SH rs2,offset(rs1)"}),(0,n.jsx)(i.td,{children:"Store Half"}),(0,n.jsx)(i.td,{children:"u16[rs1 + offset] \u2190 rs2"}),(0,n.jsxs)(i.td,{children:["1 if ",(0,n.jsx)(i.a,{href:"#paging",children:"paged-in"})," 1094 to 5130 otherwise"]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SW rs2,offset(rs1)"}),(0,n.jsx)(i.td,{children:"Store Word"}),(0,n.jsx)(i.td,{children:"u32[rs1 + offset] \u2190 rs2"}),(0,n.jsxs)(i.td,{children:["1 if ",(0,n.jsx)(i.a,{href:"#paging",children:"paged-in"})," 1094 to 5130 otherwise"]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"ADDI rd,rs1,imm"}),(0,n.jsx)(i.td,{children:"Add Immediate"}),(0,n.jsx)(i.td,{children:"rd \u2190 rs1 + sx(imm)"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SLTI rd,rs1,imm"}),(0,n.jsx)(i.td,{children:"Set Less Than Immediate"}),(0,n.jsx)(i.td,{children:"rd \u2190 sx(rs1) < sx(imm)"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SLTIU rd,rs1,imm"}),(0,n.jsx)(i.td,{children:"Set Less Than Immediate Unsigned"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) < ux(imm)"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"XORI rd,rs1,imm"}),(0,n.jsx)(i.td,{children:"Xor Immediate"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) \u2295 ux(imm)"}),(0,n.jsx)(i.td,{children:"2"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"ORI rd,rs1,imm"}),(0,n.jsx)(i.td,{children:"Or Immediate"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) \u2228 ux(imm)"}),(0,n.jsx)(i.td,{children:"2"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"ANDI rd,rs1,imm"}),(0,n.jsx)(i.td,{children:"And Immediate"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) \u2227 ux(imm)"}),(0,n.jsx)(i.td,{children:"2"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SLLI rd,rs1,imm"}),(0,n.jsx)(i.td,{children:"Shift Left Logical Immediate"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) \xab ux(imm)"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SRLI rd,rs1,imm"}),(0,n.jsx)(i.td,{children:"Shift Right Logical Immediate"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) \xbb ux(imm)"}),(0,n.jsx)(i.td,{children:"2"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SRAI rd,rs1,imm"}),(0,n.jsx)(i.td,{children:"Shift Right Arithmetic Immediate"}),(0,n.jsx)(i.td,{children:"rd \u2190 sx(rs1) \xbb ux(imm)"}),(0,n.jsx)(i.td,{children:"2"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"ADD rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Add"}),(0,n.jsx)(i.td,{children:"rd \u2190 sx(rs1) + sx(rs2)"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SUB rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Subtract"}),(0,n.jsx)(i.td,{children:"rd \u2190 sx(rs1) - sx(rs2)"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SLL rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Shift Left Logical"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) \xab rs2"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SLT rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Set Less Than"}),(0,n.jsx)(i.td,{children:"rd \u2190 sx(rs1) < sx(rs2)"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SLTU rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Set Less Than Unsigned"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) < ux(rs2)"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"XOR rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Xor"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) \u2295 ux(rs2)"}),(0,n.jsx)(i.td,{children:"2"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SRL rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Shift Right Logical"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) \xbb rs2"}),(0,n.jsx)(i.td,{children:"2"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SRA rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Shift Right Arithmetic"}),(0,n.jsx)(i.td,{children:"rd \u2190 sx(rs1) \xbb rs2"}),(0,n.jsx)(i.td,{children:"2"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"OR rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Or"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) \u2228 ux(rs2)"}),(0,n.jsx)(i.td,{children:"2"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"AND rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"And"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) \u2227 ux(rs2)"}),(0,n.jsx)(i.td,{children:"2"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"MUL rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Multiply"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) \xd7 ux(rs2)"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"MULH rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Multiply High Signed Signed"}),(0,n.jsx)(i.td,{children:"rd \u2190 (sx(rs1) \xd7 sx(rs2)) \xbb xlen"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"MULHSU rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Multiply High Signed Unsigned"}),(0,n.jsx)(i.td,{children:"rd \u2190 (sx(rs1) \xd7 ux(rs2)) \xbb xlen"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"MULHU rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Multiply High Unsigned Unsigned"}),(0,n.jsx)(i.td,{children:"rd \u2190 (ux(rs1) \xd7 ux(rs2)) \xbb xlen"}),(0,n.jsx)(i.td,{children:"1"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"DIV rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Divide Signed"}),(0,n.jsx)(i.td,{children:"rd \u2190 sx(rs1) \xf7 sx(rs2)"}),(0,n.jsx)(i.td,{children:"2"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"DIVU rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Divide Unsigned"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) \xf7 ux(rs2)"}),(0,n.jsx)(i.td,{children:"2"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"REM rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Remainder Signed"}),(0,n.jsx)(i.td,{children:"rd \u2190 sx(rs1) mod sx(rs2)"}),(0,n.jsx)(i.td,{children:"2"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"REMU rd,rs1,rs2"}),(0,n.jsx)(i.td,{children:"Remainder Unsigned"}),(0,n.jsx)(i.td,{children:"rd \u2190 ux(rs1) mod ux(rs2)"}),(0,n.jsx)(i.td,{children:"2"})]})]})]}),"\n",(0,n.jsx)(i.h3,{id:"risc-zero-ecall-operations",children:"RISC Zero ECALL Operations"}),"\n",(0,n.jsx)(i.p,{children:"RISC-V specifies a mechanism for environment calls (ecalls), which may be specified by the vendor.\nIn RISC Zero\u2019s zkVM, ecalls are specified for a number of core operations.\nA short description and associated cycle counts are listed below."}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Selector"}),(0,n.jsx)(i.th,{children:"Description"}),(0,n.jsx)(i.th,{children:"Operations"}),(0,n.jsx)(i.th,{children:"Cycles"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"HALT"}),(0,n.jsx)(i.td,{children:"Halt execution"}),(0,n.jsx)(i.td,{children:"Set system exit code to a0. Load 32-bytes output digest from [a1]. Set output digest global. Halt execution."}),(0,n.jsx)(i.td,{children:"1 + paging"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SOFTWARE"}),(0,n.jsx)(i.td,{children:"Receive data from the host"}),(0,n.jsx)(i.td,{children:"Write host-provided data to the memory range [a0 .. a0 + a1 * 4]"}),(0,n.jsx)(i.td,{children:"1 + \u2308 a1 / 4 \u2309 + paging"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"SHA-256"}),(0,n.jsx)(i.td,{children:"SHA-256 hash"}),(0,n.jsx)(i.td,{children:"Compute the Merkle\u2013Damg\xe5rd compression of the region [a2 .. a2 + a3 * 64] with initial state [a1]. Write the digest to [a0]."}),(0,n.jsx)(i.td,{children:"6 + 68 * a2 + paging"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"BIGINT"}),(0,n.jsx)(i.td,{children:"256-bit modular operation"}),(0,n.jsx)(i.td,{children:"if a1 = 0, [a0] \u2190 [a2] \u22c5 [a3] (mod [a4])"}),(0,n.jsx)(i.td,{children:"10 + paging"})]})]})]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsxs)(i.section,{"data-footnotes":!0,className:"footnotes",children:[(0,n.jsx)(i.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{id:"user-content-fn-1",children:["\n",(0,n.jsxs)(i.p,{children:["Modern processors have endlessly complex systems of pipelining, instruction-level parallelism, micro-ops and other details that bend the concept of \u201ccycle\u201d and make it impossible to say definitive how many \u201ccycles\u201d an operation takes.\nIt is still an good intuitive starting point and working model. ",(0,n.jsx)(i.a,{href:"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{id:"user-content-fn-2",children:["\n",(0,n.jsx)(i.p,{children:"Here \u201csampling\u201d is in quotes because the profiler actually captures the call stack at every cycle of program execution. Capturing a call stack on every cycle of execution is not done in most programs on physical CPUs for a few reasons:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"It would be cost prohibitive to do so for all but quite short program executions."}),"\n",(0,n.jsx)(i.li,{children:"Introducing such heavy profiling would actually alter the performance characteristics in significant ways."}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["In zkVM execution, executions are generally short and all execution is synchronous and is not subject to any deviations in behavior due to measurement overhead. ",(0,n.jsx)(i.a,{href:"#user-content-fnref-2","data-footnote-backref":"","aria-label":"Back to reference 2",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{id:"user-content-fn-3",children:["\n",(0,n.jsxs)(i.p,{children:["An implementation of cycle-accounting for paging operations is implemented in the ",(0,n.jsx)(i.a,{href:"https://github.com/risc0/risc0/blob/v0.19.0/risc0/zkvm/src/host/server/exec/monitor.rs#L30-L39",children:"Executor"}),". (Link is to v0.19.0) ",(0,n.jsx)(i.a,{href:"#user-content-fnref-3","data-footnote-backref":"","aria-label":"Back to reference 3",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{id:"user-content-fn-4",children:["\n",(0,n.jsxs)(i.p,{children:["This is similar to the cryptography support such as ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/AES_instruction_set#x86_architecture_processors",children:"AES-NI"})," or the ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Intel_SHA_extensions",children:"SHA extensions"})," for x86 processors.\nIn both cases, the circuitry is extended to compute otherwise expensive operations in fewer instruction cycles. ",(0,n.jsx)(i.a,{href:"#user-content-fnref-4","data-footnote-backref":"","aria-label":"Back to reference 4",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{id:"user-content-fn-5",children:["\n",(0,n.jsxs)(i.p,{children:["RISC Zero has an implementation for Apple\u2019s Metal accelerators.\nUnfortunately, it is does not work with the latest versions of Metal as of October 2023. See ",(0,n.jsx)(i.a,{href:"https://github.com/risc0/risc0/issues/937",children:"https://github.com/risc0/risc0/issues/937"})," ",(0,n.jsx)(i.a,{href:"#user-content-fnref-5","data-footnote-backref":"","aria-label":"Back to reference 5",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},9027:(e,i,s)=>{s.d(i,{Z:()=>n});const n=s.p+"assets/images/ecdsa-verification-flamegraph-1bbb98199aeeccb65f92679600a3e3e6.png"},1151:(e,i,s)=>{s.d(i,{Z:()=>a,a:()=>o});var n=s(7294);const t={},r=n.createContext(t);function o(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);