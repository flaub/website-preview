"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9404],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(r),m=o,h=c["".concat(p,".").concat(m)]||c[m]||d[m]||a;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3170:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={},i="Building zkVM Hello World",l={unversionedId:"tutorials/hello-world",id:"tutorials/hello-world",title:"Building zkVM Hello World",description:"This tutorial will walk you through building your first zkVM application.",source:"@site/docs/tutorials/hello-world.md",sourceDirName:"tutorials",slug:"/tutorials/hello-world",permalink:"/website-preview/risc0/risc0/pr/1077/next/tutorials/hello-world",draft:!1,editUrl:"https://github.com/risc0/risc0/edit/main/website/docs/tutorials/hello-world.md",tags:[],version:"current",frontMatter:{},sidebar:"GettingStartedSidebar",previous:{title:"Tutorials",permalink:"/website-preview/risc0/risc0/pr/1077/next/tutorials/overview"},next:{title:"Proof System Overview",permalink:"/website-preview/risc0/risc0/pr/1077/next/proof-system/"}},p={},s=[{value:"Step 1: Create a new project",id:"step-1-create-a-new-project",level:2},{value:"Step 2 (Host): Share private data as input with the guest",id:"step-2-host-share-private-data-as-input-with-the-guest",level:2},{value:"Step 3 (Guest): Read input and commit output",id:"step-3-guest-read-input-and-commit-output",level:2},{value:"Step 4 (Host): Generate a receipt and read its journal contents",id:"step-4-host-generate-a-receipt-and-read-its-journal-contents",level:2}],u={toc:s},c="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"building-zkvm-hello-world"},"Building zkVM Hello World"),(0,o.kt)("p",null,"This tutorial will walk you through building your first zkVM application.\nBy following the steps in this guide, you will learn how:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"to use the ",(0,o.kt)("a",{parentName:"li",href:"https://docs.rs/cargo-risczero/latest/cargo_risczero/"},"cargo risczero")," tool to create a new project"),(0,o.kt)("li",{parentName:"ul"},"to send private data to the guest program"),(0,o.kt)("li",{parentName:"ul"},"zkVM executes and generates a proof of a guest program"),(0,o.kt)("li",{parentName:"ul"},"guest writes public output")),(0,o.kt)("h2",{id:"step-1-create-a-new-project"},"Step 1: Create a new project"),(0,o.kt)("p",null,"Firstly, visit ",(0,o.kt)("a",{parentName:"p",href:"https://dev.risczero.com/zkvm/install"},"Installation")," page for installing necessary software.\nSecondly, using ",(0,o.kt)("inlineCode",{parentName:"p"},"risczero")," toolchain create a ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-world")," project from the command line. The ",(0,o.kt)("inlineCode",{parentName:"p"},"risczero")," toolchain takes ",(0,o.kt)("inlineCode",{parentName:"p"},"--guest-name")," parameter, a guest program you want to run on zkVM to generate a proof of its execution:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"## Create a project from our starter template\ncargo risczero new hello-world --guest-name hello_guest\ncd hello-world\n")),(0,o.kt)("p",null,"In the project folder, ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-world"),", build and run the project using ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo run --release"),".\nUse this command any time you'd like to check your progress."),(0,o.kt)("h2",{id:"step-2-host-share-private-data-as-input-with-the-guest"},"Step 2 (Host): Share private data as input with the guest"),(0,o.kt)("p",null,"zkVM or a ",(0,o.kt)("a",{parentName:"p",href:"https://dev.risczero.com/terminology#prover"},"prover")," runs on the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://dev.risczero.com/terminology#host-program"},"host")),". The host code is in ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-world/host/src/main.rs"),".\nThe host creates an executor environment ",(0,o.kt)("inlineCode",{parentName:"p"},"ExecutorEnv")," before constructing a prover.\nThe host makes ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," value available to the guest before execution. It does it by adding ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," to the executor environment, which is responsible for managing guest-readable memory. When the prover executes the program, it can access input:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use risc0_zkvm::{default_prover, ExecutorEnv};\n\nfn main() {\n    let input: u32 = 7;\n    let env = ExecutorEnv::builder().write(&input).unwrap().build().unwrap();\n}\n")),(0,o.kt)("h2",{id:"step-3-guest-read-input-and-commit-output"},"Step 3 (Guest): Read input and commit output"),(0,o.kt)("p",null,"Now, let's look at the guest code located in ",(0,o.kt)("inlineCode",{parentName:"p"},"methods/guest/src/main.rs"),".\nThis is the portion of the code that will be proven.\nIn the code snippet below, the guest reads the ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," value from the host and then commits it to the ",(0,o.kt)("a",{parentName:"p",href:"https:/dev.risczero.com/terminology#journal"},"journal")," portion of the ",(0,o.kt)("a",{parentName:"p",href:"https:/dev.risczero.com/terminology#receipt"},"receipt"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use risc0_zkvm::guest::env;\n\npub fn main() {\n    // read the input\n    let input: u32 = env::read();\n\n    // do something with the input\n    // write public output to the journal\n    env::commit(&input);\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"env::commit")," function commits public results to the ",(0,o.kt)("a",{parentName:"p",href:"https:/dev.risczero.com/terminology#journal"},"journal"),". Once committed to the journal, anyone with the ",(0,o.kt)("a",{parentName:"p",href:"https:/dev.risczero.com/terminology#receipt"},"receipt")," can read this value."),(0,o.kt)("p",null,"Notice, by committing any private information to the journal, we make this private data public. We want to avoid committing sensitive data to public journal."),(0,o.kt)("h2",{id:"step-4-host-generate-a-receipt-and-read-its-journal-contents"},"Step 4 (Host): Generate a receipt and read its journal contents"),(0,o.kt)("p",null,"Let's look at how the host generates a receipt and extracts the ",(0,o.kt)("a",{parentName:"p",href:"https:/dev.risczero.com/terminology#journal"},"journal"),"'s contents.\nWe get a receipt, extract a journal from the receipt, and verify it.\nIn a real-world scenario, we'd want to hand the ",(0,o.kt)("a",{parentName:"p",href:"https:/dev.risczero.com/terminology#receipt"},"receipt")," to someone else, but verifying it ourselves will be a nice way to check our project is working as expected.\nAfter receipt verification, let's print ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello world")," with the public output by adding this line to the host: ",(0,o.kt)("inlineCode",{parentName:"p"},'println!("Hello, world! I generated a proof of guest execution! {} is a public output from journal", _output);')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use methods::{\n    HELLO_GUEST_ELF, HELLO_GUEST_ID\n};\nuse risc0_zkvm::{default_prover, ExecutorEnv};\n\nfn main() {\n    let input: u32 = 15 * u32::pow(2, 27) + 1;\n    let env = ExecutorEnv::builder().write(&input).unwrap().build().unwrap();\n    // Obtain the default prover.\n    let prover = default_prover();\n    // Produce a receipt by proving the specified ELF binary.\n    let receipt = prover.prove_elf(env, HELLO_GUEST_ELF).unwrap();\n\n    // Extract journal of receipt\n    let _output: u32 = receipt.journal.decode().unwrap();\n\n    receipt.verify(HELLO_GUEST_ID).unwrap();\n\n    // Print, notice, after committing to a journal, the private input became public\n    println!("Hello, world! I generated a proof of guest execution! {} is a public output from journal ", _output);\n}\n')),(0,o.kt)("p",null,"You should now be able to see your proof with ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo run --release"),'.\nIf your program printed the "Hello, world!" assertion and ',(0,o.kt)("a",{parentName:"p",href:"https:/dev.risczero.com/terminology#receipt"},"receipt")," verification was a success, congratulations!\nIf not, we hope that troubleshooting will get you familiar with the system, and we'd love to chat with you on ",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/risczero"},"Discord"),".\nOr, if you believe you've found a bug or other problem in our code, please open an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/risc0/risc0/issues"},"issue")," describing the problem."),(0,o.kt)("p",null,"If you're ready to start building more complex projects, we recommend taking a look at the other examples in our ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/risc0/risc0/tree/main/examples"},"examples directory")," for more project ideas that use zero-knowledge proofs."))}d.isMDXComponent=!0}}]);